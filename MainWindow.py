# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vivid_images.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QVBoxLayout, QPushButton, QWidget, QFileDialog
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from qt_material import apply_stylesheet
import os
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import cv2
import Stitch
import FliterWindow
import time
import Fliter
class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(737, 655)
        
        apply_stylesheet(app, theme='light_blue.xml')
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayout_2 = QtWidgets.QFormLayout(self.centralwidget)
        self.formLayout_2.setObjectName("formLayout_2")
        self.Button_LoadImg = QtWidgets.QPushButton(self.centralwidget)
        self.Button_LoadImg.setObjectName("Button_LoadImg")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.Button_LoadImg)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollArea.setStyleSheet("border: 1px solid blue;") # 边框
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 713, 268))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.SpanningRole, self.scrollArea)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.Button_Fliter = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Fliter.setObjectName("Button_Fliter")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.Button_Fliter)
        self.Button_Stitch = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Stitch.setObjectName("Button_Stitch")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.Button_Stitch)
        self.Button_Watermark = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Watermark.setObjectName("Button_Watermark")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.Button_Watermark)
        self.Button_History = QtWidgets.QPushButton(self.centralwidget)
        self.Button_History.setObjectName("Button_History")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.Button_History)
        self.Button_Unuse = QtWidgets.QPushButton(self.centralwidget)
        self.Button_Unuse.setObjectName("Button_Unuse")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.Button_Unuse)
        self.Button_SaveImg = QtWidgets.QPushButton(self.centralwidget)
        self.Button_SaveImg.setObjectName("Button_SaveImg")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.Button_SaveImg)
        self.formLayout_2.setLayout(2, QtWidgets.QFormLayout.LabelRole, self.formLayout)
        self.scrollArea_2 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 604, 268))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.scrollArea_2.setStyleSheet("border: 1px solid blue;") # 边框
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.scrollArea_2)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 737, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        
        ################################
        #自定义变量
        ################################
        
        self.inputFileNameList = [] ## 图片文件路径及文件名列表
        self.outputFileNameList = [] 
        
        
        
        ### 按键事件
        self.Button_LoadImg.clicked.connect(self.loadImg)
        self.Button_Stitch.clicked.connect(self.imgStitch)
        self.Button_Fliter.clicked.connect(self.imgFliter)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "vivid images"))
        self.Button_LoadImg.setText(_translate("MainWindow", "加载图片"))
        self.Button_Fliter.setText(_translate("MainWindow", "滤镜"))
        self.Button_Stitch.setText(_translate("MainWindow", "图片拼接"))
        self.Button_Watermark.setText(_translate("MainWindow", "水印"))
        self.Button_History.setText(_translate("MainWindow", "历史记录"))
        self.Button_Unuse.setText(_translate("MainWindow", "待开发..."))
        self.Button_SaveImg.setText(_translate("MainWindow", "保存图片"))
        
        
## 在scroll area 显示图片
    def inputImgShow(self):
        total = len(self.inputFileNameList)

        self.qw = QWidget()
        if total % 5 == 0:
            rows = int(total / 5)
        else:
            rows = int(total / 5) + 1
        self.qw.setMinimumSize(850, 230 * rows)
        for i in range(total):

            photo = QPixmap(self.inputFileNameList[i])
            # print('photo:',photo)
            # photo.loadFromData(req.content)
            width = photo.width()
            height = photo.height()
            print('width:', width, '      ', 'height:', height)

            if width == 0 or height == 0:
                continue
            tmp_image = photo.toImage()  # 将QPixmap对象转换为QImage对象
            size = QSize(width, height)
            # photo.convertFromImage(tmp_image.scaled(size, Qt.IgnoreAspectRatio))
            photo = photo.fromImage(tmp_image.scaled(size, Qt.IgnoreAspectRatio))

            # 为每个图片设置QLabel容器
            label = QLabel()
            label.setFixedSize(150, 200)
            label.setStyleSheet("border:1px solid purple")
            label.setPixmap(photo)
            label.setScaledContents(True)  # 图像自适应窗口大小

            vl = QVBoxLayout()
            vl.addWidget(label)

            tmp = QWidget(self.qw)
            tmp.setLayout(vl)
            tmp.move(160 * (i % 5), 230 * int(i / 5))

        self.scrollArea.setWidget(self.qw)  
    
    #  其实没必要再写一个输出函数，直接把另一个scroll重载了就行
    #  无聊的话再改   
    #  想优化的话，可以改为opencv对象转qpixmap
    def outputImgShow(self):
        total = len(self.outputFileNameList)

        self.qw = QWidget()
        if total % 5 == 0:
            rows = int(total / 5)
        else:
            rows = int(total / 5) + 1
        self.qw.setMinimumSize(850, 230 * rows)
        for i in range(total):

            photo = QPixmap(self.outputFileNameList[i])
            # print('photo:',photo)
            # photo.loadFromData(req.content)
            width = photo.width()
            height = photo.height()
            print('width:', width, '      ', 'height:', height)

            if width == 0 or height == 0:
                continue
            tmp_image = photo.toImage()  # 将QPixmap对象转换为QImage对象
            size = QSize(width, height)
            # photo.convertFromImage(tmp_image.scaled(size, Qt.IgnoreAspectRatio))
            photo = photo.fromImage(tmp_image.scaled(size, Qt.IgnoreAspectRatio))

            # 为每个图片设置QLabel容器
            label = QLabel()
            label.setFixedSize(150, 200)
            label.setStyleSheet("border:1px solid purple")
            label.setPixmap(photo)
            label.setScaledContents(True)  # 图像自适应窗口大小

            vl = QVBoxLayout()
            vl.addWidget(label)

            tmp = QWidget(self.qw)
            tmp.setLayout(vl)
            tmp.move(160 * (i % 5), 230 * int(i / 5))

        self.scrollArea_2.setWidget(self.qw)  

    
    ### 加载图片
    def loadImg(self,):
        names, _ = QFileDialog.getOpenFileNames(None, 'Images',os.getcwd(), "Image Files (*.jpg *.png)")
        try: 
            if names:
                self.inputFileNameList = names
                print(self.inputFileNameList)
                self.inputImgShow()
                
        except:
            QMessageBox.about(None,"载入图片错误","载入图片错误")
        # f.write(str(time.asctime(time.localtime()))+": 加载了"+str(len(self.inputFileNameList))+"张图片")
    
    # 拼接
    def imgStitch(self):
        if self.inputFileNameList:
            try:
                res = Stitch.imgStitch(self.inputFileNameList)
            except:
                QMessageBox.about(None,"错误","拼接失败!请检查输入图片")
            
            try:
                filePath = "./img/stitch_result.jpg"
                cv2.imwrite(filePath,res)
                self.outputFileNameList = [filePath]
                self.outputImgShow()
                
            except:
                QMessageBox.about(None,"错误","显示图片错误")
            f=open(r'./history.log','a+')
            f.write(str(time.localtime().tm_year)+"/"+str(time.localtime().tm_mon)+'/'+str(time.localtime().tm_mday)+" "+str(time.localtime().tm_hour)+":"+str(time.localtime().tm_min)+"   "+": 拼接操作完成")
        else:
            QMessageBox.about(None,"错误","请先加载图片")
            
    # 滤镜
    def imgFliter(self):
        fliterName = ""
        self.outputFileNameList = []
        resList = []
        if self.inputFileNameList:
            try:
                dialog = QDialog()
                fliterDialog = FliterWindow.Ui_Dialog()
                fliterDialog.setupUi(dialog,Fliter.fliterList) # 传入Fliter类的Fliter滤镜选择列表，这么写可能有点绕，但是方便解耦
                dialog.exec_()
            except:
                QMessageBox.warning(None,"错误","打开滤镜选择窗口错误")
            fliterName = fliterDialog.fliterName    # 因为只要传一个参数所以就没有用信号槽传递父子之间的参数了，实际情况尽量不要这么做（偷懒
            print(fliterName)
            try:
                if fliterName:
                    resList = Fliter.Fliter(self.inputFileNameList,fliterName)
            except:
                QMessageBox.about(None,"错误","滤镜处理失败！")
            f=open(r'./history.log','a+')
            f.write(str(time.localtime().tm_year)+"/"+str(time.localtime().tm_mon)+'/'+str(time.localtime().tm_mday)+" "+str(time.localtime().tm_hour)+":"+str(time.localtime().tm_min)+"   "+"为图片进行"+str(fliterName)+"滤镜处理\n\n")
            try:    
                for i,img in enumerate(resList):
                    fileDir,ext = os.path.splitext(self.inputFileNameList[i])
                    fileName = fileDir.split('/')[-1]
                    fliePath = "./img/"+fileName+"_"+fliterName+".jpg"
                    cv2.imwrite(fliePath,img)
                    self.outputFileNameList.append(fliePath)
                self.outputImgShow()
            except:
                QMessageBox.about(None,"错误","显示图片错误")        
        else:
            QMessageBox.about(None,"错误","请先加载图片")
       
    # 历史记录     
    def historyLog(self):
        pass    
        
if __name__=="__main__":
    
    if not os.path.exists("./img"):
        os.makedirs("./img")
    f=open(r'./history.log','a+')
    
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app=QtWidgets.QApplication(sys.argv)
    widget=QtWidgets.QMainWindow()
    ui=Ui_MainWindow()    
    ui.setupUi(widget)
    widget.show()
    f.close()
    sys.exit(app.exec_())
    
